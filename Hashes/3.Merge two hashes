h1 ={delhi: 101, pune: 102, chennai: 103, kolkata: 104, indore: 106}

h2 ={london: 200, dubai: 201, tokyo: 203, johansberg: 204, amsterdam: 205}


h3=h1.merge(h2)

p h3
 
class Customer 
    def initialize(name, id, acc_no,balance)
      @name = name
      @id = id
      @acc_no = acc_no
      @balance = balance
    end 
  
    def name=(name)
      @name=name
    end
  
    def id=(id)
      @id=id
    end
  
    def acc_no=(acc_no)
      @acc_no=acc_no
    end
  
    def balance=(balance)
      @balance=balance
    end
  
    def name()
      @name 
    end 
  
    def id()
      @id 
    end
  
    def acc_no()
      @acc_no 
    end
  
    def balance()
      @balance 
    end
  
    def to_s 
      puts "name is:#{name},  id is:#{id}, account no is: #{acc_no}, balance:#{balance}"
    end 
  
  end 
  
  
  
  
  
  class HandleCustomer
    @@last_id = 0      
    @@last_acc_no = 1000
    def initialize 
      @customers =[]
    end 
  
    def add_customer(name,balance)
        @@last_id+=1
        @@last_acc_no+=1

        customer=Customer.new(name,@@last_id,@@last_acc_no,balance)
      @customers << customer 
    end 
  
    def view_customer()
      @customers.each do |customer|
        puts customer
      end 
    end 
  
    def deposit()
  
      puts "Enter your customer id:"
      customer_id=gets.chomp.to_i
      customer= @customers.find {|c| c.id==customer_id}
  
      if customer 
        puts "Enter amount to deposit"
        amount=gets.chomp.to_i 
  
        if amount >0
          customer.balance+= amount 
          puts "Amount deposited"
        else
          puts "Amount must be greater than 0"
        end 
        else 
            puts "Customer not found"
      end 
    end 
  
    def withdraw()
  
      puts "Enter your customer id:"
      customer_id=gets.chomp.to_i
      customer= @customers.find {|c| c.id==customer_id}
  
      if customer 
        puts "Enter amount to withdraw"
        amount=gets.chomp.to_i 
  
        if amount>customer.balance
          puts "Insuffiecient balance"
        elsif amount <0
          puts "Amount must be greater than 0"
        else
          customer.balance-= amount 
          puts "Amount withdrawn"
        end
    else 
        puts "Customer not found"
    end
    end 
  
    def view_customer()
      @customers.each do |customer|
        puts customer
      end 
    end 
  end  
  
  obj=HandleCustomer.new 
  
  
  loop do 
  
    puts "Enter any key to continue or n to break:"
  
    option =gets.chomp
  
    break if option =="n"
  
    puts "1 for adding customer"
    puts "2 for viewing data of customer"
    puts "3 for depositing money of customer"
    puts "4 for withdraw money of customer"
  
    choice =gets.chomp.to_i
    
    if choice ==1
      
      puts "Enter Your name"
      @name=gets.chomp 
  
      
      # if @id == @customers.customer_id
      #   puts "Id "
      #   # customer= @customers.find {|c| c.id==customer_id}
  
  
      puts "Enter Your balance"
      @balance=gets.chomp.to_i 
  
      obj.add_customer(@name,@balance)
  
    elsif choice == 2
      obj.view_customer
  
    elsif choice == 3
      obj.deposit 
  
    elsif choice==4
      obj.withdraw
    end 
end 
      
