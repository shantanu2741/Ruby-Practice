class User
  attr_accessor :id, :name

  @@user_counter = 1

  def initialize(name)
    @id = @@user_counter
    @name = name
    @@user_counter += 1
  end
end
class Expense
  attr_accessor :amount, :paid_by, :split_between

  def initialize(amount, paid_by, split_between)
    @amount = amount
    @paid_by = paid_by
    @split_between = split_between
  end

  def split
    split_amount = @amount / @split_between.size
    @split_between.map { |user| [user, split_amount] }.to_h
  end
end
class Balance
  attr_accessor :balances

  def initialize
    @balances = Hash.new(0)
  end

  def add_balance(paid_by, splits)
    splits.each do |user, amount|
      @balances[paid_by] += amount
      @balances[user] -= amount
    end
  end

  def show_balances
    @balances.each do |user, balance|
      if balance > 0
        puts "#{user.name} is owed ₹#{balance.round(2)}"
      elsif balance < 0
        puts "#{user.name} owes ₹#{-balance.round(2)}"
      end
    end
  end

  def settle_balances
    @balances.clear
    puts "All balances are settled!"
  end
end
require_relative 'user'
require_relative 'expense'
require_relative 'balance'

class SplitwiseApp
  def initialize
    @users = []
    @balance_manager = Balance.new
  end

  def add_user(name)
    user = User.new(name)
    @users << user
    puts "User #{name} added successfully!"
  end

  def list_users
    puts "Users:"
    @users.each { |user| puts "#{user.id}. #{user.name}" }
  end

  def add_expense(amount, paid_by_id, split_between_ids)
    paid_by = @users.find { |user| user.id == paid_by_id }
    split_between = @users.select { |user| split_between_ids.include?(user.id) }
    expense = Expense.new(amount, paid_by, split_between)
    splits = expense.split
    @balance_manager.add_balance(paid_by, splits)
    puts "Expense of ₹#{amount} added successfully!"
  end

  def show_balances
    @balance_manager.show_balances
  end

  def settle_balances
    @balance_manager.settle_balances
  end

  def menu
    loop do
      puts "\n--- Splitwise App ---"
      puts "1. Add User"
      puts "2. List Users"
      puts "3. Add Expense"
      puts "4. Show Balances"
      puts "5. Settle Balances"
      puts "6. Exit"
      print "Enter your choice: "
      choice = gets.chomp.to_i

      case choice
      when 1
        print "Enter user name: "
        name = gets.chomp
        add_user(name)
      when 2
        list_users
      when 3
        print "Enter expense amount: "
        amount = gets.chomp.to_f
        print "Enter paid by user ID: "
        paid_by_id = gets.chomp.to_i
        print "Enter split between user IDs (comma-separated): "
        split_between_ids = gets.chomp.split(',').map(&:to_i)
        add_expense(amount, paid_by_id, split_between_ids)
      when 4
        show_balances
      when 5
        settle_balances
      when 6
        puts "Exiting... Goodbye!"
        break
      else
        puts "Invalid choice. Please try again."
      end
    end
  end
end

# Start the app
app = SplitwiseApp.new
app.menu

